{"version":3,"sources":["components/plot.js","App.js","serviceWorker.js","index.js"],"names":["CustomPlot","x","y","data","type","marker","color","layout","width","height","title","App","props","state","coeff","class","this","style","for","id","aria-describedby","placeholder","value","onChange","e","setState","target","onClick","axios","post","then","object","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAqBeA,EAlBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACrB,OACI,kBAAC,IAAD,CACIC,KAAM,CACF,CACIF,EAAGA,EACHC,EAAGA,EACHE,KAAM,OAENC,OAAQ,CAAEC,MAAO,UAIzBC,OAAQ,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,W,iBCiEvCC,G,wDA1Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXZ,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVY,MAAO,IACPL,OAAQ,GANO,E,qDAUT,IAAD,OACP,OACE,6BACE,yBAAKM,MAAM,6BACT,wBAAIA,MAAM,gDAAV,yBAGF,yBAAKA,MAAM,sCACT,kBAAC,EAAD,CACEd,EAAGe,KAAKH,MAAMZ,EACdC,EAAGc,KAAKH,MAAMX,KAIlB,6BAEA,yBAAKa,MAAM,yBAAyBE,MAAO,CAAET,MAAO,UAGlD,yBAAKO,MAAM,cACT,2BAAOG,IAAI,SAAX,8BACA,2BAAOd,KAAK,OAAOW,MAAM,eAAeI,GAAG,QAAQC,mBAAiB,YAAYC,YAAY,mCAC1FC,MAAON,KAAKH,MAAMC,MAAOS,SAAU,SAACC,GAClC,EAAKC,SAAS,CAAEX,MAAOU,EAAEE,OAAOJ,YAMtC,yBAAKP,MAAM,cACT,2BAAOG,IAAI,UAAX,kBACA,2BAAOd,KAAK,OAAOW,MAAM,eAAeI,GAAG,SAASC,mBAAiB,YAAYC,YAAY,uBAC3FC,MAAON,KAAKH,MAAMJ,OAAQc,SAAU,SAACC,GACnC,EAAKC,SAAS,CAAEhB,OAAQe,EAAEE,OAAOJ,YAMvC,4BAAQP,MAAM,iBAAiBY,QAC7B,WAEEC,IAAMC,KAAK,aAAc,CACvBpB,OAAQ,EAAKI,MAAMJ,QAAU,EAC7BK,MAAO,EAAKD,MAAMC,OAAS,MAC1BgB,MACD,SAACC,GACC,IAAI5B,EAAO4B,EAAO5B,KAClB,EAAKsB,SACH,CACExB,EAAGE,EAAI,MAAJ,KACHD,EAAGC,EAAI,MAAJ,cAZf,c,GAlDQ6B,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b172225.chunk.js","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst CustomPlot = ({ x, y }) => {\n    return (\n        <Plot\n            data={[\n                {\n                    x: x,\n                    y: y,\n                    type: 'line',\n                    // mode: 'lines+markers',\n                    marker: { color: 'blue' },\n                }\n            ]}\n\n            layout={{ width: 500, height: 500, title: 'Plot' }}\n        />\n    )\n}\n\nexport default CustomPlot\n","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport CustomPlot from './components/plot';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: [1, 2, 3],\n      y: [1, 2, 3],\n      coeff: 0.75,\n      height: 5\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n          <h1 class=\"display-4 justify-content-center text-center\">Edunomics Task Phase</h1>\n        </div>\n\n        <div class=\"justify-content-center text-center\">\n          <CustomPlot\n            x={this.state.x}\n            y={this.state.y}\n          />\n        </div>\n\n        <br />\n\n        <div class=\"card mx-auto card-body\" style={{ width: \"18rem\" }}>\n\n          {/* coeff of restitution */}\n          <div class=\"form-group\">\n            <label for=\"coeff\">Coefficient of restitution</label>\n            <input type=\"text\" class=\"form-control\" id=\"coeff\" aria-describedby=\"emailHelp\" placeholder=\"Enter coefficient of restitution\"\n              value={this.state.coeff} onChange={(e) => {\n                this.setState({ coeff: e.target.value })\n              }}\n            />\n          </div>\n          \n          {/* initial height */}\n          <div class=\"form-group\">\n            <label for=\"height\">Initial Height</label>\n            <input type=\"text\" class=\"form-control\" id=\"height\" aria-describedby=\"emailHelp\" placeholder=\"Enter initial height\"\n              value={this.state.height} onChange={(e) => {\n                this.setState({ height: e.target.value })\n              }}\n            />\n          </div>\n          \n          {/* submit button */}\n          <button class=\"btn btn-danger\" onClick={\n            () => {\n\n              axios.post('/calculate', {\n                height: this.state.height || 5,\n                coeff: this.state.coeff || 0.75\n              }).then(\n                (object) => {\n                  var data = object.data\n                  this.setState(\n                    {\n                      x: data['graph']['time'],\n                      y: data['graph']['height'],\n                    }\n                  )\n                }\n              )\n            }\n          }>Plot</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}